# Think Python Notes

[TOC]

## Chapter 1

- 对计算机科学家,最重要的技能是解决问题的能力.解决问题意味着对问题进行形式化,寻求创新性的解决方案,并且清晰,准确地表达解决方案的能力
- `^`在python中作为异或运算符XOR
- `type()`查看值的类型
- 形式语言(formal languages)是人类为了特殊用途而设计的,数学符号,化学符号,编程语言等都是
- 语法规则有2种类型,分别设计记号与结构.记号是语言的基本元素,结构则与记号的组合方式有关.理清语句的结构的过程称为解析(parsing)

## Chapter 2

- 编程语言最大的特性之一,是操作变量的能力.变量是指向某值的名称
- 变量名,表达式,语句
- 在注释中记录代码不明显的特征,解释代码为什么这么做更有用.显而易见的东西就没必要再注释了
- 语法是指程序的结构及其背后的规则,语法错误,python会提示;运行时错误,只在程序开始运行之后出现,也称异常;语义错误,与程序的意思有关,程序运行时不会产生错误信息,但不会返回正确结果- 字符串的`+`,`*`操作
 
## Chapter 3

- 编程的语境下,函数是指一个有命名的,执行某个计算的语句序列
- `int`转化浮点数时,只截掉小数部分
- 模块指一个含有相关函数的文件
- 点标记法,调用模块中的函数,`模块名.函数名`
- 编程语言的特征之一是`组合规则`,将小块构建材料组合在一起,几乎任何可以放置的地方,都可以放表达式,但赋值语句的左侧必须是变量名
- 定义一个函数创建一个函数对象,其类型是`function`
- 在函数内部,实参赋给形参,实参名与形参名没有任何关系
- 变量与形参都是局部的.在所有函数以外创建变量,它就属于`__main__`
- 无返回值函数,实际返回了一个`None`
- `print`会自动换行

## Chapter 4

- 将一部分代码包装在函数里被称作封装(encapsulaton).好处是为这些代码赋予了一个名字,实现了特定功能;另外实现了代码的复用
- 调用函数时,用关键字实参,可以忽略参数顺序
- 函数的接口（interface）是一份关于如何使用该函数的总结： 形参是什么？函数做什么？返回值是什么？ 如果接口让调用者避免处理不必要的细节，直接做自己想做的事，那么这个接口就是“干净的”。
- 重新整理一个程序以改进函数接口和促进代码复用的这个过程， 被称作重构（refactoring）.在一个项目开始的时候，你常常并不知道那么多，不能设计好全部的接口。 一旦你开始编码后，你才能更好地理解问题。 有时重构是一个说明你已经学到某些东西的预兆。
- 接口就像是函数和调用者之间的合同。 调用者同意提供合适的参数，函数同意完成相应的工作。
