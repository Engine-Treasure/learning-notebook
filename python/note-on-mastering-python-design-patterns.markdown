# 精通 Python 设计模式读书笔记

### 译者的话

- 设计模式的本质是在已有的方案之上发现更好的方案(而不是全新发明)
- 软件开发不是简单的累积代码, 在实现业务功能的同时应该考虑如何控制软件的复杂度
- 软件的复杂度分为两个层面: 业务逻辑复杂度和代码实现复杂度

### 前言

- 软件工程中,设计模式是指软件设计问题的推荐方案. 设计模式一般是描述如何组织代码和使用最佳实践来解决常见的设计问题
- 设计模式是高层次的方案, 不关注具体的实现细节
- 设计模式的本质是在已有的方案之上发现更好的方案(而不是全新发明)
- You Aren't Gonna Need It
- Keep It Simple Stupid
- 随处使用设计模式和过早优化, 都是误入歧途

## 第一部分 创建型模式

### 第一章 工厂模式

- 创建型设计模式处理对象创建相关的问题, 目标是当直接创建对象不太方便时, 提供更好的方式
- 在工厂模式中, 调用方请求一个对戏那个, 而无需知道对象来自哪里
- 工厂背后的思想是简化对象的创建, 基于一个`中心化函数`来实现, 更易于追踪创建了哪些对象
- 通过将创建对象的代码和使用对象的代码解耦,工厂能够降低应用维护的复杂度
- 工厂通常有两种形式: 一种是工厂方法, 是一个函数, 对不同的输入参数返回不同的对象; 另一种是抽象工厂, 是一组用于创建一系列相关事物对象的工厂方法
- 工厂方法集中在一个地方创建对象, 使对象跟踪变得更容易
- 实践中, 通常创建多个工厂方法, 对相似的对象创建进行逻辑分组, 每个工厂方法负责一个分组, 比如让一个工厂方法负责数据库连接
- 工厂方法还能用于`解耦`对象的创建和使用, 创建对象时, 没有与某个特定类耦合/绑定到一起, 而只是通过调用某个函数来提供信息?
- 工厂方法可以在必要时创建新的对象, 从而提高性能和内存使用率? 若直接实例化类来创建对象, 每次创建新对象就需要分配额外的内存
