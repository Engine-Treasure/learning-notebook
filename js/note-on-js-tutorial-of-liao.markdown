# 廖雪峰的 JavaScript 教程, 笔记

- 简单地说, JavaScript是一种运行在浏览器中的解释型的编程语言。
- 在Web世界里，只有JavaScript能**跨平台**、**跨浏览器驱动网页**，**与用户交互**?

## 快速入门

- 由<script>...</script>包含的代码就是JavaScript代码，它将直接被浏览器执行
- 或把JavaScript代码放到一个单独的`.js`文件，然后在HTML中通过<script src="..."></script>引入这个文件
- `<script>`标签默认的`type`就是JavaScript，所以不必显式地把`type`指定为JavaScript
- 要让浏览器运行JavaScript，必须先有一个HTML页面，在HTML页面中引入JavaScript，然后，让浏览器加载该HTML页面，就可以执行JavaScript代码。
- Chrome - Developer Tools - Console, 可直接输入 JavaScript 代码, 执行. 如`console.log(a);`查看变量`a`的值

### 基本语法

- 每个语句以`;`结束，语句块用`{...}`. 但 JavaScript 不强制要求在每条语句结尾加`;`, 浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上`;`
- **让JavaScript引擎自动加分号在某些情况下会改变程序的语义，导致运行结果与期望不一致**
- 缩进不是JavaScript语法要求必须的，但缩进有助于我们理解代码的层次，所以编写代码时要遵守缩进规则。
- 单行注释`//`, 块注释`/*...*/`
- JavaScript严格区分大小写

### 数据类型和变量

- Number - JavaScript 不区分整数和浮点数, 统一用Number表示. `NaN`表示非数(Not a Number), `Infinity`表示无限大. 16进制前导`0x`
- 字符串 - 不区分单引号或双引号.
- 布尔值 - `true`, `false`.
- `&&` - 与运算, `||` - 或运算, `!` - 非运算
- JavaScript允许对任意数据类型做比较. 由于 JavaScript 的设计缺陷, **不要使用==比较，始终坚持使用===比较**
 - `==` - 自动转换数据类型再比较, `false == 0; //true`
 - `===` - 它不会自动转换数据类型，如果数据类型不一致，返回`false`，如果一致，再比较
- `NaN`这个特殊的Number与所有其他值都不相等，包括它自己, `NaN === NaN; //false`
- 唯一能判断`NaN`的方法是通过`isNaN()`函数, `isNaN(NaN); // true`
- `1 / 3 === (1 - 2 / 3); // false` 这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值
- `null` - 表示空值, `undefined` - 表示"未定义". 事实证明，区分两者的意义不大。大多数情况下，我们都应该用`null`。`undefined`仅仅在判断函数参数是否传递的情况下有用
- 数组 - JavaScript的数组可以包括任意数据类型, 用`[]`表示, 也可用`Array()`创建数组. 出于代码的可读性考虑，强烈建议直接使用`[]`
- 对象 - JavaScript的对象是一组由键-值组成的无序集合. JavaScript对象的键都是字符串类型，值可以是任意数据类型, 每个键又称为对象的属性. 用点标记法`对象变量.属性名`获取对象的属性
- 变量 - 变量名是大小写英文、数字、$和\_的组合，且不能用数字开头, 用`var`进行声明
- JavaScript在设计之初，为了方便初学者学习，并不强制要求用`var`申明变量。这个设计错误带来了严重的后果：如果一个变量没有通过`var`声明就被使用，那么该变量就自动被声明为**全局变量**
- 使用`var`声明的变量不是全局变量，它的范围被限制在该变量被声明的函数体内，同名变量在不同的函数体内互不冲突
- ECMA标准推出了`strict`模式, 强制通过var声明变量，未使用var声明变量就使用的，将导致运行错误。启用strict模式要在 JavaScript 代码的第一行注明: 'use strict';
- 不用`var`声明的变量会被视为全局变量，为了避免这一缺陷，所有的JavaScript代码都应该使用strict模式
