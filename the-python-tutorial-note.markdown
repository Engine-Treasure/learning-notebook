- 交互模式下,Python解释器自动将上一个表达式的值赋给变量`_`.如果对其进行赋值,就成了一个普通变量
- python支持复数,可用`j`或`J`表示虚部
- 在字符串前使用`r`,得到`raw strings`,特殊字符不会被转义
- 三重引号包裹的字符串,自动包括了行结束符,可通过在行尾添加`\`,取消当前行的自动换行,实现"续行"
- 操作符`+`和`*`可分别用于字符串的拼接与重复
- 形如`"Py" "thon"`,将被视为1个字符串.
- python没有字符类型,一个字符仅仅是一个大小为1的字符串
- 负数索引从`-1`开始,因为`-0`=`0`啊
- 对字符串使用切片时,第一个索引省略,则默认其是0;第二个索引省略,则默认是字符串的大小
- 取单个字符时,下标越界将出错;但切片能处理下标越界
- `list`是同质的,`tuple`是异质的
- list的切片,功能很强大,可以将任意list赋给选中的切片
- `print`会自动换行,使用`end`关键字参数可取消自动换行,而以指定的值结束
- python没有`switch .. case...`语句,只有`if...elif...elif...else...`
- python的`for`语句,实现对`序列`的迭代,仅此而已.
- 当要在`for`语句的迭代过程中实现对序列的修改,建议的做法是先创建一份副本.迭代的过程不会隐式地创建副本.可以通过切片方便的实现拷贝:

```python
for w in words[:]:
    if len(w) > 6:
        words.insert(0, w)
```

- `range()`函数可生成算术级数.有两种调用方式:
 1. range(stop)                -> range object   默认从0开始
 2. range(start, stop[, step]) -> range object
- 通过下标对序列进行迭代的常用方法是,使用`enumerate()`函数
- `range object`是一个可迭代对象.
- 循环语句可以带一个`else`子句.当循环自然结束(while语句的条件不再成立,或for语句的迭代完成),被执行;若循环是被`break`终止的,`else`子句不会被执行
- `try`语句的`else`子句,在没有异常抛出时被执行
- 参数传递,传递是**引用**,而非值.因此若函数的参数是可变类型的对象,是可以对其进行修改的
- 函数是一个对象
- 没有`return`语句的函数,将自动返回`None`;不带表达式的`return`语句也返回`None`
- 几种定义函数参数的方式:
 1. 位置参数: 必须是按顺序传入参数
 2. 默认值参数: 给参数设置默认值,当调用函数未传入参数时,使用默认值.
  - 默认值在定义函数时被计算出来
  - 若默认值参数是可变类型对象,那么默认值也是可以被修改的!因此,最好是不要使用可变类型对象作为默认值
 3. 关键字参数: 函数调用时,必须指明函数名与函数值.关键字参数必须在位置参数之后,关键字参数名必须与函数定义时的参数名相匹配,其位置不重要.
 4. 可选参数: 将参数包装称一个tuple使用.必须出现在普通参数之后,因为它会将剩余的参数全部打包进tuple.唯一可以出现在可选参数之后的,是关键字参数
 5. `**name`: 接受一个字典作为关键字参数
 6. `*name`: 接受一个位置参数的元组.`*name`必须在`**name`之前
 7. `*`操作符,可用于将`list`或`tuple`解压,作为可变参数传入`*args`
 8. `**`操作符,用于将`dict`解压,作为关键字参数传入`**kw`
- `lambda`表达式,用于创建一个匿名函数.`lambda`函数可被用于任何函数能应用的场合.
- `lambda`表达式实际是一种语法糖
