# 自治搜索引擎的读书笔记

##Chapter1 搜索引擎是如何工作的

###1-1 理解搜索引擎的构成

- 搜索引擎是一类系统或软件的统称, 作用是从文档的集合中查找(检索)出匹配信息需求(查询)的文档, 信息需求是由单词, 问题等构成的.
- 搜索引擎的组件:
 1. 索引管理器(Index Manager) - 通常将索引作为二级存储器上的二进制文件来进行管理, 通过保存经过压缩过的索引来达到减少从二级存储加载的数据量, 提升检索处理效率
 2. 索引检索器(Index Searcher) - 根据来自检索应用程序用户的查询, 协同检索管理器进行检索处理. 其会根据某种标准对检索结果排序, 并将排在前面的结果返回给应用程序
 3, 索引构建器(Indexer) - 先通过解析将**文本文档**分解为**单词序列**, 然后再将单词序列转换为**索引结构**: `文本文档 -(解析, 分解)-> 单词序列 -(转换, 构建)-> 索引结构`
 4. 文档管理器(Document Manager) - 从文档数据库中取出与查询相匹配的文档, 再根据需求从该文档中提取出一部分内容作为**摘要**
- 与搜索引擎相关的组件:
 1. 爬虫(crawler) - 用于收集web上html文件等文档的系统, 任务是高效地收集网页信息
 2. 搜索排序系统 - 给作为检索对象的文档打分, 如google的pagerank系统

###1-2 实现快速全文搜索的索引结构

- 全文检索的2种办法:
 1. 全扫描 - 从头到尾扫描作为检索对象的文档, 以此来搜索要搜索的字符串. 只适用于处理少量或暂时性的文档. (KMP算法, BM算法). (Unix的grep命令就是全扫描方式检索)
 2. 索引检索 - 预先为文档建立索引, 再利用索引来搜索要搜索的字符串. 事先建立索引需要花费时间, 但即使文档的数量增加, 检索速度也不会大幅度下降, 适用于大量的文档.
- 倒排索引具有与图书索引完全相同的逻辑结构, 即相当于列出了一张"哪个单词出现在了哪一页"的表格
- 手动建立倒排索引的步骤:
 1. 建立以页为纵轴, 以单词为横轴的"哪一页上有哪些单词"的表格
 2. 将上述表格横纵坐标互换, 得到"哪个单词出现在哪几页"的表格
- 在全文搜索中, 将构建索引的单位通常为"文档", 将文档的标识信息称为"文档编号", 以上所说的"页"就是一个文档编号的表现形式
- "将单词和单词所在的文档的文档编号对应起来的表格"即为倒排索引, `单词
- 表示单词与文档编号对应关系的信息称为`倒排项`
- 各单词的倒排项的集合称为`倒排列表`

###1-3 深入理解倒排索引

- 倒排索引 = 词典 + 倒排文件
- 倒排索引的结构:

```text
 ————     ————————————————
|"ai"|   | 1 | 3 | 5 | 7  |  --> 倒排项的集合为倒排列表
 ————     ————————————————
|    |   |一项即为一倒排项|
|    |   |                |
|    |   |                |
|    |   |                |
 ————     ————————————————
 词典 -->     倒排文件
```

- 搜索的一般过程是: `词典` --> `单词 --> 倒排列表 --> 文档编号 --> 文档`
- 在单词级别的倒排文件中，不仅带有有关单词出现在哪个文档的信息， 还带有单词在文章中出现的位置(开头数第几个), 甚至可以带有词频信息
- 从倒排索引中查找短语, 就是确认多个单词出现的位置关系, 是否相邻

###1-4 制作中文文档的倒排索引

- 分割中文句子的方法:
 1. 词素解析分割 - 词素是语言中有意义的最小单位, 一般使用机器学习的方法来完善词素库
 2. N-gram分割 - 将句子分成N各字符串组成的片段序列的方法, 如"我爱谷歌"就被2-gram分成了"我爱", "爱谷", "谷歌"
- 词素分割与N-gram分割法的优缺点围绕着"分割形成的词元数多少", "遗漏问题".
- 以从文档的开头数第n个**字符**而不是词元来构建倒排项, 可以设计出不依赖于句子分割方法的搜索引擎

###1-5 实现倒排索引

- 为了能够快速地获取对应单词的倒排列表, **词典**的构造相当重要, 通常使用哈希表, 树等数据结构
- 使用二叉搜索树实现**词典**时, 要先将数据对按单词的词典顺序排列, 然后存储到存储器. 树的各结点通过地址引用(指针)连接
- 在二级存储器(硬盘)上存储词典时, 要维护一个列表, 用于存储从开头算起的每个数据对的***偏移量***. 检索时, 对偏移量的列表进行二分查找
- 当存储大型词典时, 往往使用适合块设备的B+树等树形数据结构. 在B+树中, 所有记录都存储在树中的叶结点上, 内部结点上只以关键字的顺序存储关键字
- 在实现倒排文件时, 往往假设所有倒排列表表都会变得很长, 因此一般会将倒排列表存储到二级存储器的连续区域中. 由此可通过一级存储的顺序存取来加载倒排列表
- 单词级别的倒排列表由以下2个要素组成:
 1. 文档编号
 2, 文档中的偏移列表
 (有时还可保存词频)
- 为了进行高效的检索处理, 通常先将文档编号和偏移量按升序排列后再存储

###1-6 使用倒排索引进行检索

- 使用倒排索引的检索处理流程:
 1. 获取查询中每个单词的倒排列表
 2. 根据布尔检索, 获取符合检索条件的文档编号
 3. 计算符合检索条件的文档和查询的匹配度
 4. 获取对检索结果进行排序时使用的属性值
 5. 根据匹配度或用于排序的属性值, 获取前k个文档
- 根据单词各自倒排列表长度的升序, 对查询中的单词进行排序, 可以在对多个倒排列表两两计算交集时, 尽可能地减少比较的次数
- 在web检索中, 一般按文档与查询的关联度对检索结果进行排序, 计算关联度的方法有:
 1. 余弦相似度 - 将文档和查询映射到以单词为维度的向量空间上, 计算文档向量与查询向量的夹角(内积), 夹角越小, 说明文档和查询的关联度越高
 2, Okapi BM25算法 - 基于`文档是否匹配查询是由概率决定的`的统计原理, 根据单词的出现频率等因素计算出查询与文档相关联的概率, 概率越大, 文档与查询的关联度越高
- 在被称为信息检索的全文搜索学术领域, 由于其原本的目的就是找出与信息需求相匹配的文档, 因此可以认为匹配的文档中没有必须包含查询

###1-7 构建倒排索引

- 索引管理器-管理-倒排索引结构
- 索引检索器-处理-检索
- 索引构建器-构建倒排索引
- 在内存中构建倒排索引与手动方法类似, 方法如下. 由于大多数情况下, 倒排索引都是稀疏表, 此方法会浪费大量内存. 因此常用链表来实现倒排列表的优化
 1. 在内存中生成与文档编号对应的单词表(二位数组)
 2. 转换二位数组,得到单词对应的文档编号表
- 基于排序的索引构建法, 是将由单词和倒排项组成的二元组写入二级存储, 并以单词的词典顺序对二元组排序, 以此来构建倒排索引中的倒排列表:
 1. 对各文档中构成该文档的每个单词都建立一条形如"单词, 文档编号, 词频"的记录, 将记录写入二级存储上的文件末尾
 2. 将文件中各条记录优先按单词升序排列, 单词字段相同的记录按文档编号升序排列
 3. 从第一行开始逐行地读取排序后的文件, 取出每个单词的文档编号的列表, 并用这些列表构建出各单词的倒排列表
 (排序在二级存储上进行)
- 基于合并的索引构建法, 先在内存上构建倒排索引的片段, 然后将片段导出到二级存储, 最后将导出的多个倒排索引片段合并, 以此来构建最终的倒排索引
 1. 在内存上构建以单词为键, 以倒排列表为值的映射, 即由部分数据构成倒排索引的片段
 2, 每当遇到文档中的单词不在映射表中时, 都要将该单词加入到映射表
 3. 当映射表的大小达到预先设定好的内存大小上限时, 将其导出到文件
 4, 重复, 直到处理完所有的文档, 最后利用多路合并将导出的多个文件合并, 形成最终的倒排索引
- 一般认为基于合并的索引构建法更高效, 因为基于排序的方法要在二级存储上进行排序, 读写的总量会增多
- `静态构建方法`: 在构建处理完成后, 索引才能被用于检索. 多用于文档集合较稳定, 或即使文档集合发生变化, 在变化同步到索引之前, 还有一定时间等场景
- `动态构建方法`: 使索引结构时刻处于可供检索的状态, 还可以一遍实时更新索引, 一边构建索引. 多用于信息的时效性非常重要的文档, 如web上的新闻

###1-8 准备要检索的文档

- 收集数据 --> 数据规范化
- 高效地管理存储器, 应用程序的高度可扩展性, 优化遍历web的算法
- 大多数提供检索服务的系统都会先转换收集而来的数据, 使其格式适合作为搜索引擎的输入文档

##Chapter2 准备全文搜索引擎的检索样本

###2-1 全文搜索引擎wiser

- 
