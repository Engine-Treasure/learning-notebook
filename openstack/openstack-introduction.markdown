# 初识 OpenStack

## 云计算

- 云计算是一种计算模型，它将诸如运算能力、存储、网络和软件等资源抽象成为服务，以便让用户通过互联网远程享用，付费的形式也如同传统公共服务设施一样。因需而定、提供方便、动态改变和无限的虚拟化扩展能力是云计算的几个重要特征。

## OpenStack

- OpenStack 是一整套开源软件项目的综合。
- 以下是 5 个 OpenStack 的重要组成部分：
 - Nova - 计算服务
 - Swift - 存储服务
 - Glance - 镜像服务
 - Keystone - 认证服务
 - Horizon - UI服务

### Nova - 计算设施

- OpenStack 云实例生命期所需的各种动作都将由 Nova 进行处理和支撑。它负责管理整个云的计算资源、网络、授权及测度。
- 虽然 Nova 本身并不提供任何虚拟能力，但是它将使用 libvirt API 与虚拟机的宿主机进行交互。
- Nova 通过 Web 服务 API 来对外提供处理接口，而且这些接口与 Amazon 的 Web 服务接口是兼容的。
- 功能与特点：
 - 实例生命周期管理
 - 计算资源管理
 - 网络与授权管理
 - 基于REST的API
 - 异步连续通信
 - 支持各种宿主：Xen、XenServer/XCP、KVM、UML、VMware vSphere及Hyper-V
- OpenStack 计算部件：
 - Nova弹性云包含以下主要部分：
 - API Server（nova-api）- 提供了云设施与外界交互的接口，它是外界用户对云实施管理的唯一通道。
 - 消息队列（rabbit-mq server）- OpenStack内部在遵循AMQP（高级消息队列协议）的基础上采用消息队列进行通信。Nova对请求应答进行`异步调用`，当请求接收后便则立即触发一个回调。由于使用了异步通信，不会有用户的动作被长置于等待状态。
 - 运算工作站（nova-compute）- 管理实例的整个生命周期。通过消息队列接收请求并执行，从而对实例进行各种操作。
 - 网络控制器（nova-network）- 处理主机的网络配置。
 - 卷管理（nova-volume）- 管理基于LVM的实例卷。它提供了一种保持实例持续存储的手段。当结束一个实例后，根分区如果是非持续化的，那么对其的任何改变都将丢失。可是，如果从一个实例中将卷分离出来，或者为这个实例附加上卷的话，即使实例被关闭，数据仍然保存其中。这些数据可以通过将卷附加到原实例或其他实例的方式而重新访问。**重要数据务必要写入卷中**
 - 调度器（nova-scheduler）- 负责将 nova-API 调用送达给目标，以守护进程的方式运行，根据调度算法从可用资源池中恰当地选择运算服务器。其采用可插入式架构。

### Glance - 镜像服务器

- OpenStack镜像服务器是一套虚拟机镜像发现、注册、检索系统。
- 可以将镜像存储到以下存储中:
 - 本地文件系统（默认）
 - OpenStack对象存储
 - S3直接存储
 - S3对象存储（作为S3访问的中间渠道）
 - HTTP（只读）
- Glance 构件包括：控制器与注册器

### Swift - 存储设施

- Swift为OpenStack提供一种分布式、持续虚拟 对象存储
- Swift具有跨节点百级对象的存储能力。Swift内建冗余和失效备援管理，也能够处理归档和媒体流，特别是对大数据（千兆字节）和大容量（多对象数量）的测度非常高效。
- 功能及特点：
 - 海量对象存储
 - 大文件（对象）存储
 - 数据冗余管理
 - 归档能力—–处理大数据集
 - 为虚拟机和云应用提供数据容器
 - 处理流媒体
 - 对象安全存储
 - 备份与归档
 - 良好的可伸缩性
- 组件：
 - Swift账户服务器 - 与容器服务器类似，将列出容器中的对象。
 - Swift容器服务器 - 列出一个容器中的所有对象，默认对象列表将存储为SQLite文件，容器服务器也会统计容器中包含的对象数量及容器的存储空间耗费。
 - Swift对象服务器 - 一种二进制存储，负责处理本地存储中的对象数据的存储、检索和删除。对象都是文件系统中存放的典型的二进制文件，具有扩展文件属性的元数据（xattr）。
 - Swift代理服务器 - 接收外界请求，检测合法的实体位置并路由它们的请求，处理实体失效而转移时，故障切换的实体重复路由请求。
 - Swift RING(索引环) - 记录着Swift中物理存储对象的位置信息，是真实物理存储位置的实体名的虚拟映射，似于查找及定位不同集群的实体真实物理位置的索引服务

### Keystone - 认证服务

- Keystone为所有的OpenStack组件提供认证和访问策略服务(统一)，它依赖自身REST（基于Identity API）系统进行工作
- 有2种授权方式： 基于用户名/密码的，以及基于令牌的
- 提供3种服务：
 - 令牌服务：含有授权用户的授权信息
 - 目录服务：含有用户合法操作的可用服务列表
 - 策略服务：利用Keystone具体指定用户或群组某些访问权限
- 组件：
 - 服务入口 - 如Nova、Swift和Glance一样，每个OpenStack服务都拥有一个指定的端口和专属的URL，称为入口（endpoints）。

 - 区位 - 在某个数据中心，一个区位具体指定了一处物理位置。在典型的云架构中，如果不是所有的服务都访问分布式数据中心或服务器的话，则也称其为区位。
 - 用户 - Keystone授权使用者，代表一个个体。用户拥有证书，且可能分配给一个或多个租户。经验证后，会为每个单独的租户提供一个特定的令牌。
 - 服务 - 总体而言，任何通过Keystone进行连接或管理的组件都被称为服务。
 - 角色 - 为了维护安全限定，就云内特定用户可执行的操作而言，该用户关联的角色是非常重要的。一个角色是应用于某个租户的的使用权限的集合。角色是使用权限的逻辑分组。
 - 租间 - 租间指的是具有全部服务入口并配有特定成员角色的一个项目。一个租间映射到一个Nova的“project-id”，在对象存储中，一个租间可以有多个容器。根据不同的安装方式，一个租间可以代表一个客户、帐号、组织或项目。

### Horizon - Web 接口

- 管理、控制 OpenStack 服务的 Web 控制面板，可以管理实例、镜像、创建密匙对，对实例添加卷、操作Swift容器等。
- 用户还可以在控制面板中使用终端（console）或VNC直接访问实例。
- 特点：
 - 实例管理：创建、终止实例，查看终端日志，VNC连接，添加卷等
 - 访问与安全管理：创建安全群组，管理密匙对，设置浮动IP等
 - 偏好设定：对虚拟硬件模板可以进行不同偏好设定
 - 镜像管理：编辑或删除镜像
 - 查看服务目录
 - 管理用户、配额及项目用途
 - 用户管理：创建用户等
 - 卷管理：创建卷和快照
 - 对象存储处理：创建、删除容器和对象
 - 为项目下载环境变量
