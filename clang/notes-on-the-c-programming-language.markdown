# The C Programming Language Notes

## Chapter 1 导言

- 一个c语言程序, 无论大小, 都是由`函数`和`变量`组成的. 函数中含有一些`语句`, 以指定要执行的计算操作; 变量则用于存储计算过程中使用的值.
- 每个程序都从`main`函数开始, 这意味着每个程序都必须在某个位置包含一个main函数
- 函数之间进行数据交换的一种方式是调用函数向被调用函数提供一个值(成为`参数`)列表, 函数名后的一对圆括号()将参数列表括起来. 函数的语句用一对花括号{}括起来.
- `/* ... */` - (多行)注释, 程序中允许出现空格, 制表符, 换行符的地方, 都允许使用注释
- 在c语言中, 所有变量都必须先声明后使用
- 缩进, 是为了凸显程序的逻辑结构; 每行只写一条语句, 并在运算符两边各加一个空格字符, 使运算的结合关系更清楚明了
- c语言的整数除法操作将进行***舍位***\\
(python中, `//`才是整除)
- 格式化字符串, `%`用于占位, %之后是描述, 表示之后会用何种类型的数据补位, 还可以添加具体的格式, 比如数字宽. 因此叫`格式化字符串`
- c语言本身并没有定义IO功能, `printf`是标准库函数中的一个函数
- 如果某个算术运算符的所有操作数均为整型, 则执行整型运算; 如果至少有一个操作数是浮点数, 则运算开始之前, 整型数将被转换为浮点数
- 即使浮点常量可以用整数的形式表示, 在书写时最好为其显式地加上小数点
- 举例说明: `%6.1f` - 表示待打印的浮点数至少占6个字符宽, 且小数点后有1位数字
- `%d` - d是**decimal**的缩写, 表示十进制整型数; `%ld` - 表示long; `%o` - 表示八进制数; `%x` - 表示十六进制数; `%c` - 表示字符; `%s` - 表示字符串; `%%` - 百分号本身
- 在允许使用某种类型变量值的任何场合, 都可以使用该类型的更复杂的表达式
- for语句比较适合初始化和增长步长都是单条语句并且逻辑相关的情形, 它将循环控制语句集中放在一起, 比while更紧凑
- `#define 符号常量 替换文本` - 将符号常量定义为一个特定的字符串, 之后所有程序中出现的符号常量都用替换文本替换. **指明行末没有分号**
- 无论文本从何处输入, 输出到何处, 其输入/输出都是按字符流的方式处理. `文本流`是由多行字符构成的字符序列, 而每行字符则由0个或多个字符组成, 行末是一个换行符
- 字符在键盘, 屏幕或其他任何地方无论以什么形式表现, 在机器内部都以`位模式`存储
- `EOF`定义在<stdio.h>中, 是一个整型数(-1)
- **赋值操作是一个表达式, 并且具有一个值, 即赋值后左边变量保存的值. 因此, 赋值可以作为更大的表达式的一部分出现**
- c语言的语法规则要求for语句必须有一个循环体, 可用单独的分号表示`空语句`
- 用单引号表示字符, 可以表示一个整型值, 如`'A'`表示65; 用双引号表示字符串, `"A"`是一个仅包含一个字符的字符串变量
- 通常将函数定义中圆括号内列表中出现的变量成为`形式参数`, 而将函数调用中与形式参数对应的值称为`实际参数`
- 函数调用, 将**控制权**交给被调用的函数; 返回时, 将控制权返回给调用者, 返回值或不带返回值
- main函数本身也是函数, 也可以向其调用者返回一个值, 该调用者实际上就是**程序的执行环境**. 返回值为0, 表示程序正常终止, 返回值非0, 表示出现异常情况或出错结束条件.
- 在c语言中, 所有函数参数都"通过值"传递, 也就是说, 传递给被调用函数的参数值存放在临时变量中, 而不是存放在原来的变量中. 这意味着, 在c语言中, 被调用函数不能直接修改主调函数中变量的值, 而只能修改其私有的临时副本的值
- 传递值的一个优点是: 在被调用函数中, 参数可以看作便于初始化的局部变量(在函数内部可任意修改, 而不影响原来的变量), 从而使得额外使用的变量更少, 使程序更紧凑简洁.
- `void`关键字, 显式地说明函数不返回任何值
- c语言中, 形如"hello\n"的字符串常量, 以字符数组的形式存储时, 数组的各元素分别存储字符串的各个字符, 并以'\0'标志字符串的结束
- 初始化变量时, 不为其赋值, 其中存放的是无效值
- 函数中的每个局部变量只在函数被调用时存在, 在函数执行完毕退出时销毁.
- `外部变量`可以在全局范围内访问. 函数间可通过外部变量交换数据, 而不必使用参数表. 外部变量在程序执行期间一直存在.
- 外部变量必须定义在所有函数之外, 且只能定义一次, 定义后编译程序时将为它分配存储单元. 在每个需要访问外部变量的函数中, 必须声明相应的外部变量, 声明时用`extern`显式声明, 也可以通过上下文隐式声明.
- 通常的做法是, 所有外部变量的定义都放在源文件的开始处, 这样可以省略extern声明. 如果程序包含多个源文件, 需要使用别的源文件中的外部变量时, 要用extern声明来建立该变量与其定义之间的联系
- 通常将变量和函数的extern声明放在一个单独的文件中, 这个文件就称为`头文件`, 并在每个源文件的开头使用#include语句将所要用的文件包含进来
- 在ANSI C中, 如果要声明空参数列表, 必须使用关键字void进行显式声明. 空圆括号对是旧版c语言的做法
- **定义**表示创建变量或分配存储单元, 而**声明**指的是说明变量的性质, 但不分配存储单元
- 过分依赖外部变量会导致一定的风险, 因为它会使程序中的数据关系模糊

## Chapter 2 类型, 运算符与表达式

- 在传统c语言用法中, 变量名使用小写字母, 符号常量名全部使用大写字母
- `不理解的一段话: `对于内部名而言, 至少前面31个字符是有效的. 函数名与外部变量名包含的字符数目可能小于31, 因为汇编程序和加载程序可能会使用这些外部名, 而语言本身无法控制加载和汇编程序. 对于外部名, ANSI标准仅保证前6个字符的唯一性, 且不区分大小写.
- 选择的变量名要能够尽量从字面上表达变量的用途. 局部变量一般使用较短的变量名(尤其是循环控制变量), 外部变量使用较长的名字
- c语言仅提供了下列几种基本数据类型:
 1. char 字符型, 占用一个字节(8位), 可以存放本地字符集的一个字符
 2. int 整型, 通常反映了所用机器中整数的最自然长度
 3. float
 4. double
- 类型限定符`signed`与`unsigned`用于限定char类型或任何整型. unsigned类型的数总是非负值, 并遵守算术模2^n定律. 举例说明, char对象占8位, 那么unsigned char类型变量的取值范围是0~255, 而signed char类型变量的取值范围是-128~127
- 类似*1234*的整数常量属性int类型, long类型的常量以字母l或L结尾. 如果一个整数太大以致无法用int表示时, 将被当作long类型处理. 无符号常量以字母u或U结尾. ul或UL表明unsigned long类型
- 没有后缀的浮点数常量为double类型, 用后缀f或F表示float类型, 后缀l或L表示long double
- 用前缀0表示八进制整数, 0x或0X表示十六进制整数. 八进制与十六进制同样可以使用u或l后缀
- 一个`字符常量`是一个整数, 书写时将一个字符括在单引号中表示, 如'0', 字符在机器字符集中的数值就是字符常量的值, 如'0'的值就是48
- 使用字符常量的方便之处在于无需关心字符对应的具体值, 且增加了程序可读性. 字符常量一般用来与其他字符进行比较, 比如将一个字符与'0'和'9'进行比较, 以判断其是否是数字字符
- 某些字符可通过`转义字符序列`表示为字符和字符串常量.
- 用`\ooo`表示任意字节大小(0~255)的位模式, 其中ooo代表3个八进制数字; 或用`\xhh`表示, hh是一个或多个十六进制数字. 举例说明, `#define BELL '\007'`, `#define BELL '\x7'`
- ANSI C的全部转义字符:
 - `\a` - 响铃符
 - `\b` - 回退符
 - `\f` - 换页符
 - `\n` - 换行符
 - `\r` - 回车符
 - `\t` - 横向制表符
 - `\v` - 纵向制表符
 - `\\` - 反斜杆
 - `\?` - 问号
 - `\'` - 单引号
 - `\"` - 双引号
 - `\ooo` - 八进制数
 - `\xhh` - 十六进制数
- 字符常量`'\0'`表示值为0的字符, 即空字符(null). 通常用`'\0'`的形式代表0, 以强调某些表达式的字符属性, 但其数字值为0

