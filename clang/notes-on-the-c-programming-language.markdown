# The C Programming Language Notes

## Chapter 1 导言

- 一个c语言程序, 无论大小, 都是由`函数`和`变量`组成的. 函数中含有一些`语句`, 以指定要执行的计算操作; 变量则用于存储计算过程中使用的值.
- 每个程序都从`main`函数开始, 这意味着每个程序都必须在某个位置包含一个main函数
- 函数之间进行数据交换的一种方式是调用函数向被调用函数提供一个值(成为`参数`)列表, 函数名后的一对圆括号()将参数列表括起来. 函数的语句用一对花括号{}括起来.
- `/* ... */` - (多行)注释, 程序中允许出现空格, 制表符, 换行符的地方, 都允许使用注释
- 在c语言中, 所有变量都必须先声明后使用
- 缩进, 是为了凸显程序的逻辑结构; 每行只写一条语句, 并在运算符两边各加一个空格字符, 使运算的结合关系更清楚明了
- c语言的整数除法操作将进行***舍位***\\
(python中, `//`才是整除)
- 格式化字符串, `%`用于占位, %之后是描述, 表示之后会用何种类型的数据补位, 还可以添加具体的格式, 比如数字宽. 因此叫`格式化字符串`
- c语言本身并没有定义IO功能, `printf`是标准库函数中的一个函数
- 如果某个算术运算符的所有操作数均为整型, 则执行整型运算; 如果至少有一个操作数是浮点数, 则运算开始之前, 整型数将被转换为浮点数
- 即使浮点常量可以用整数的形式表示, 在书写时最好为其显式地加上小数点
- 举例说明: `%6.1f` - 表示待打印的浮点数至少占6个字符宽, 且小数点后有1位数字
- `%d` - d是**decimal**的缩写, 表示十进制整型数; `%ld` - 表示long; `%o` - 表示八进制数; `%x` - 表示十六进制数; `%c` - 表示字符; `%s` - 表示字符串; `%%` - 百分号本身
- 在允许使用某种类型变量值的任何场合, 都可以使用该类型的更复杂的表达式
- for语句比较适合初始化和增长步长都是单条语句并且逻辑相关的情形, 它将循环控制语句集中放在一起, 比while更紧凑
- `#define 符号常量 替换文本` - 将符号常量定义为一个特定的字符串, 之后所有程序中出现的符号常量都用替换文本替换. **指明行末没有分号**
- 无论文本从何处输入, 输出到何处, 其输入/输出都是按字符流的方式处理. `文本流`是由多行字符构成的字符序列, 而每行字符则由0个或多个字符组成, 行末是一个换行符
- 字符在键盘, 屏幕或其他任何地方无论以什么形式表现, 在机器内部都以`位模式`存储
- `EOF`定义在<stdio.h>中, 是一个整型数(-1)
- **赋值操作是一个表达式, 并且具有一个值, 即赋值后左边变量保存的值. 因此, 赋值可以作为更大的表达式的一部分出现**
- c语言的语法规则要求for语句必须有一个循环体, 可用单独的分号表示`空语句`
- 用单引号表示字符, 可以表示一个整型值, 如`'A'`表示65; 用双引号表示字符串, `"A"`是一个仅包含一个字符的字符串变量
- 通常将函数定义中圆括号内列表中出现的变量成为`形式参数`, 而将函数调用中与形式参数对应的值称为`实际参数`
- 函数调用, 将**控制权**交给被调用的函数; 返回时, 将控制权返回给调用者, 返回值或不带返回值
- main函数本身也是函数, 也可以向其调用者返回一个值, 该调用者实际上就是**程序的执行环境**. 返回值为0, 表示程序正常终止, 返回值非0, 表示出现异常情况或出错结束条件.
- 在c语言中, 所有函数参数都"通过值"传递, 也就是说, 传递给被调用函数的参数值存放在临时变量中, 而不是存放在原来的变量中. 这意味着, 在c语言中, 被调用函数不能直接修改主调函数中变量的值, 而只能修改其私有的临时副本的值
- 传递值的一个优点是: 在被调用函数中, 参数可以看作便于初始化的局部变量(在函数内部可任意修改, 而不影响原来的变量), 从而使得额外使用的变量更少, 使程序更紧凑简洁.
- `void`关键字, 显式地说明函数不返回任何值
- c语言中, 形如"hello\n"的字符串常量, 以字符数组的形式存储时, 数组的各元素分别存储字符串的各个字符, 并以'\0'标志字符串的结束
- 初始化变量时, 不为其赋值, 其中存放的是无效值
- 函数中的每个局部变量只在函数被调用时存在, 在函数执行完毕退出时销毁.
- `外部变量`可以在全局范围内访问. 函数间可通过外部变量交换数据, 而不必使用参数表. 外部变量在程序执行期间一直存在.
- 外部变量必须定义在所有函数之外, 且只能定义一次, 定义后编译程序时将为它分配存储单元. 在每个需要访问外部变量的函数中, 必须声明相应的外部变量, 声明时用`extern`显式声明, 也可以通过上下文隐式声明.
- 通常的做法是, 所有外部变量的定义都放在源文件的开始处, 这样可以省略extern声明. 如果程序包含多个源文件, 需要使用别的源文件中的外部变量时, 要用extern声明来建立该变量与其定义之间的联系
- 通常将变量和函数的extern声明放在一个单独的文件中, 这个文件就称为`头文件`, 并在每个源文件的开头使用#include语句将所要用的文件包含进来
- 在ANSI C中, 如果要声明空参数列表, 必须使用关键字void进行显式声明. 空圆括号对是旧版c语言的做法
- **定义**表示创建变量或分配存储单元, 而**声明**指的是说明变量的性质, 但不分配存储单元
- 过分依赖外部变量会导致一定的风险, 因为它会使程序中的数据关系模糊

## Chapter 2 类型, 运算符与表达式

- 在传统c语言用法中, 变量名使用小写字母, 符号常量名全部使用大写字母
- `不理解的一段话: `对于内部名而言, 至少前面31个字符是有效的. 函数名与外部变量名包含的字符数目可能小于31, 因为汇编程序和加载程序可能会使用这些外部名, 而语言本身无法控制加载和汇编程序. 对于外部名, ANSI标准仅保证前6个字符的唯一性, 且不区分大小写.
- 选择的变量名要能够尽量从字面上表达变量的用途. 局部变量一般使用较短的变量名(尤其是循环控制变量), 外部变量使用较长的名字
- c语言仅提供了下列几种基本数据类型:
 1. char 字符型, 占用一个字节(8位), 可以存放本地字符集的一个字符
 2. int 整型, 通常反映了所用机器中整数的最自然长度
 3. float
 4. double
- 类型限定符`signed`与`unsigned`用于限定char类型或任何整型. unsigned类型的数总是非负值, 并遵守算术模2^n定律. 举例说明, char对象占8位, 那么unsigned char类型变量的取值范围是0~255, 而signed char类型变量的取值范围是-128~127
- 类似*1234*的整数常量属性int类型, long类型的常量以字母l或L结尾. 如果一个整数太大以致无法用int表示时, 将被当作long类型处理. 无符号常量以字母u或U结尾. ul或UL表明unsigned long类型
- 没有后缀的浮点数常量为double类型, 用后缀f或F表示float类型, 后缀l或L表示long double
- 用前缀0表示八进制整数, 0x或0X表示十六进制整数. 八进制与十六进制同样可以使用u或l后缀
- 一个`字符常量`是一个整数, 书写时将一个字符括在单引号中表示, 如'0', 字符在机器字符集中的数值就是字符常量的值, 如'0'的值就是48
- 使用字符常量的方便之处在于无需关心字符对应的具体值, 且增加了程序可读性. 字符常量一般用来与其他字符进行比较, 比如将一个字符与'0'和'9'进行比较, 以判断其是否是数字字符
- 某些字符可通过`转义字符序列`表示为字符和字符串常量.
- 用`\ooo`表示任意字节大小(0~255)的位模式, 其中ooo代表3个八进制数字; 或用`\xhh`表示, hh是一个或多个十六进制数字. 举例说明, `#define BELL '\007'`, `#define BELL '\x7'`
- ANSI C的全部转义字符:
 - `\a` - 响铃符
 - `\b` - 回退符
 - `\f` - 换页符
 - `\n` - 换行符
 - `\r` - 回车符
 - `\t` - 横向制表符
 - `\v` - 纵向制表符
 - `\\` - 反斜杆
 - `\?` - 问号
 - `\'` - 单引号
 - `\"` - 双引号
 - `\ooo` - 八进制数
 - `\xhh` - 十六进制数
- 字符常量`'\0'`表示值为0的字符, 即空字符(null). 通常用`'\0'`的形式代表0, 以强调某些表达式的字符属性, 但其数字值为0
- `常量表达式`是仅仅只包含常量的表达式, 在编译时求值, 而不是在运行时求值, 可以出现在常量可以出现的任何位置
- `字符串常量`也叫`字符串字面值`, 是用双引号括起来的0或多个字符组成的字符序列.
- 从技术角度看, 字符串常量就是字符数组, 字符串的内部表示使用一个空字符'\0'作为串的结尾, 因此, 存储字符串的物理存储单元数比括在双引号内的字符数多一个. 这种表示方法也说明, **c语言对字符串长度没有限制**, 但程序必须扫描完整个字符串后才能确定字符串的长度.
- 字符常量与仅包含一个字符的字符串是有区别的, 'x'与"x"是不同的: 前者是一个整数, 其值是字母x在机器字符集中对应的数值; 后者是一个包含一个字符以及一个结束符'\0'的字符数组
- 枚举是一个常量整型值的列表, 例如`enum boolean {NO = 0, YES};`
- 没有显式说明的情况下, enum类型第一个枚举名的值为0, 第二个为1, 依此类推. 如果只指定了部分枚举名的值, 那么未指定值的枚举名的值将依着最后一个指定值向后递增
- 枚举为建立常量值与名字值之间的关联提供了一种便利的方式. 相对于#define语句, 优势在于常量值可以自动生成
- 如果变量不是局部变量, 则只能进行一次初始化操作, 从概念上讲, 应该在程序开始执行之前进行, 并且初始化表达式必须为常量表达式
- 每次进入函数或程序块时, 显式初始化的局部变量都将被初始化一次, 其初始化表达式可以是任何表达式
- 默认情况下, 全局变量与静态变量都将被初始化为0; 未经显式初始化的局部变量的值为无效值
- 任何变量的声明都可以使用`const`限定符限定, 其指定变量的值不能被修改. 都与数组而言, const限定符指定数组的所有元素的值都不能被修改. const限定符也可配合参数使用, 表明函数不能修改参数的值
- 在有负操作数的情况下, 整数除法截取的方向以及取模运算结果符号取决于具体机器的实现
- `if (!valid)` vs. `if(valid == 0), 很难判断哪种形式更好, 前者读起来更直观(如果不是有效的话), 但对于以下更复杂的结构可能会难于理解
- 一般来说, 自动转换是指将"比较窄的"操作数转换为"比较宽的"操作数, 并不丢失信息的转换
- char类型就是较小的整型, 无论是否进行符号扩展, char类型的变量都被转换为整型变量
- 由于c语言没有指定char类型的变量是无符号数变量, 还是带符号数变量, 当将一个char类型的值转换为int类型的值时, 其结果会由于机器的不同而不同
- c语言的定义保证了机器的标准打印字符集中的字符不会是负值, 因此, 在表达式中这些字符总是正值. 但存储在字符变量中的位模式在某些机器中可能是负的, 而在另一些机器中可能是正的. 为了保证程序的可移植性, 如果要在char类型的变量中存储非字符数据, 最好指定signed或unsigned限定符
- c语言中, 很多情况下会进行隐式的算术类型转换, 将"较低"的类型转换为"较高"的类型, 运算结果为"较高"的类型
- 表达式中float类型的操作数不会自动转换为double类型. 一般, 数学函数使用双精度类型的变量. 使用float类型主要是为了在使用较大的数组时节省存储空间, 有时也是为了节省机器执行时间
- 赋值时也要进行类型转换, 赋值运算符右边的值需要转换为左边变量的类型, 左边变量的类型即赋值表达式结果的类型
- 当较长的类型转换为较短的类型, 超出的高位部分将被丢弃: int转char, 丢失信息; float转int, 小数部分被截断; double转float, 四舍五入还是截断取决于具体实现
- **函数调用的参数是表达式**, 因此在将参数传递给函数时也能进行类型转换. 在没有函数原型的情况下, char与short类型都被转换为int型, float被转换为double. 因此, 即使调用函数的参数为char或float类型, 也将函数参数声明为int或double类型
- `(类型名) 表达式` - `强制类型转换`, 准确含义: 表达式首先被赋给类型名指定的类型的某个变量, 然后再用该变量替换原表达式
- 直到看到源码, 我才明白为什么伪随机叫伪随机, 为什么需要初始化种子来提高伪随机的随机性:

```c
unsigned long int next = 1;

int rand(void){
    next = next * 1103515245 + 12345;
    return (unsigned int)(next / 65536) % 32768;
}

void srand(unsigned int seed){
    next = seed;
}
```

- `++n`, 先自增, 再使用变量n的值; `n++`, 先使用变量n的值, 再将n的值加1
- 位操作符只能用于整型操作数, 包括`&`, `|`, `^`(异或), `<<`, `>>`, `~`(按位取反)
- 按位与运算经常用于屏蔽某些二进制位
- 按位或运算常用于将某些二进制位置1
- 对无符号数进行右移, 左边空出的部分用0填补; 对带符号数进行右移, 某些机器将对左边空出的部分用符号位填补(`算术移位`), 另一些机器则对左边空出的部分用0填补(`逻辑移位`)
- 表达式`x & ~077`比表达式`x & 0177700`要好, 因为前者与机器字长无关, 而后者假定x是16位的数值. 前者可移植性更强, 并且没有增加额外的开销, ~077是常量表达式, 在编译时求值
- `expr1 op= expr2`等价于`expr1 = (expr1) op (expr2)`. 前者*expr1*只计算一次, 后者*expr2*两边的圆括号必不可少
- 赋值运算符的其他优点: 表示方式与人们的思维习惯更接近, 使代码更易读, 还有助于编译器产生高效代码
- 赋值表达式的类型就是它左边操作数的类型, 其值是赋值操作完成后的值
- 在使用条件表达式`expr1 ? expr2 : expr3`, 建议使用圆括号包裹expr1, 使表达式的条件部分更易读
- c语言没有指定同一运算符中多个操作数的计算顺序(即a+b等价于b+a), 也没有指定函数各参数的求值顺序. 因此`printf("%d %d\n", ++n, power(2, n));`在不同的编译器中可能产生不同的结果, 取决于++n与power函数的执行顺序
- 函数调用, 嵌套赋值语句, 自增与自减运算符都可能产生"副作用", 在对表达式求值的同时, 修改了某些变量的值. 表达式何时会产生副作用将由编译器决定, 最佳的求值顺序同机器结构有关
- ANSI C标准明确规定了所有对参数的副作用都必须在函数调用之前生效
- 在任何一种编程语言中, 如果代码的执行结果与求值顺序相关, 则都不是好的程序设计风格. 

## Chapter 3 控制流

- 在c语言中, 分号是语句结束符; 用花括号将一组声明和语句括在一起构成了`复合语句`(或称`程序块`), 复合语句在语法上等价于单条语句
- 程序的缩进结构明确地表明了设计意图, 但编译器无法获知. 因此在有if语句嵌套的情况下使用花括号, 使代码可读性更强

```c
/*二分搜索*/

int binsearch(int x, int v[], int n){

    int low, high, mid;

    low = 0;
    high = n - 1;
    while(low <= high){
        mid = (low + high) / 2;
        if (x < v[mid])
            high = mid - 1;
        else if (x > v[mid])
            low = mid + 1;
        else
            return mid;
    }
    return -1;
}
```

- switch语句是一种多路判定语句, 它测试表达式是否与一些常量整数值中的某一个匹配, 并执行相应的分支操作. 若没有哪个分支能匹配表达式, 执行标记为default的分支, default分支是可选的
- switch语句中, **case的作用只是一个标号**. 某个分支中的代码执行完后, 程序将进入下一个分支继续执行, 付费在程序中显式地跳转, 常用的方法是使用break语句或return语句
- 除了一个计算需要多个标号的情况下, 应尽量减少从一个分支直接进入下一个分支执行的用法, 在不得不使用的情况下应该加上适当的注释
- 作为一种良好的程序设计风格, 在switch语句最后一个分支(default)后也加上一个break语句. 这样做在逻辑上没有必要, 但当需要向该switch语句后添加其他分支时, 这种防范措施会降低犯错的可能性
- 如果省略for语句的测试条件, 则认为其值永远是真值. `for(;;){ ... }`是一个无限循环
- `while` vs. `for`
 - 如果没有初始化或重新初始化的操作, 使用while循环语句更自然
 - 如果语句中需要执行简单的初始化和变量递增, 使用for语句更适合, 它将循环控制语句集中放在循环的开头, 结构更紧凑, 更清晰
 - 将循环控制部分集中在一起, 对于多重嵌套循环, 优势更明显
- Shell(希尔)排序: 先比较距离远的元素, 从而快速减少大量的无序情况, 减轻后续的工作. 被比较的元素之间的距离逐步减少, 直到减少为1, 排序就变成了相邻元素的互换

```c
/*Shell*/

/*
最外层的for语句控制两个被比较元素之间的距离, 从n/2开始, 逐步进行对折, 直到距离为0
中间层的for循环语句用于在元素间移动位置
最内层的for语句用于比较各对相距gap个位置的元素, 当两个元素逆序时将它们互换
由于gap的值最终要递减到1, 因此所有元素最终都会位于正确的排序位置上
*/
void shellsort(int v[], int n){

    int gap, i , j, temp;

    for (gap = n / 2; gap > 0; gap /= 2){
        for (i = gap; i < n; i++){
            for (j = i - gap; j >= 0 && v[j] > v[j+gap]; j -= gap){
                temp = v[j];
                v[j] = v[j + gap];
                v[j + gap] = temp;
            }
        }
    }
}
```

- 逗号运算符是c语言优先级最低的运算符, 被逗号分隔的一对表达式将按照从左到右的顺序进行求值, 各表达式右边的操作数的类型和值即为其结果的类型和值
- 逗号运算符最适用于关系紧密的结构.
- `do { ... } while (表达式)` - `do-while`循环体至少会被执行一次
- break - 从switch语句或循环中提前退出
- continue - 执行下一次循环. 在while或do-while语句中, 意味着立即执行测试部分; 在for循环中, 意味着将控制转移到递增循环变量环节

## Chapter 4 函数与程序结构
