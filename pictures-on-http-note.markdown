#图解HTTP

##Chapter1 了解Web及网络基础

- 最初设想的基本理念: 借助多文档之间相互关联形成的超文本(HyperText), 连成可互相参阅的WWW.
- 现在已经提出的3项www构建技术:
 1. 以SGML(standard generalized markup language, 标准通用标记语言)作为***页面***的文本标记语言的html(hypertext markup language, 超文本标记语言)
 2. 作为文档传递协议的http
 3. 指定文档所在地址的url(uniform resource locator, 统一资源定位符)
- 通常使用的网络是在tcp/ip协议族的基础上运作的, http是其一个子集
- tcp/ip是在ip协议的通信过程中, 使用到的协议族的统称
- tcp/ip协议族分4层: 应用层, 传输层, 网络层, 数据链路层:
 1. 应用层 - 决定了向用户提供应用服务时通信的活动
 2. 传输层 - 对应用层, 提供处于网络连接中的两台计算机之间的数据传输
 3. 网络层 - 处理网络上流动的数据包, 数据包是网络传输的最小数据单位
 4. 链路层 - 用来处理连接网络的硬件部分
- ip协议, 网络层, 作用是将各种数据包传送给对方, 其中两个重要的条件是ip地址与mac地址. arp(address resolution protocol). 路由选择. 没人能全面掌握互联网中的传输状况
- tcp协议, 传输层, 作用是提供可靠的**字节流(byte stream)**服务(为了方便传输, 将大块数据分割成以报文段为单位ied数据包进行管理). 3次握手.
- dns服务, 应用层, 提供域名到ip地址的解析服务(计算机既可以被赋予ip地址, 也可以被赋予主机名和域名)
- url是web浏览器等访问web页面时需要输入的网页地址
- uri(uniform resource identifier, 统一资源标识符):
 - uniform - 规定统一的格式可方便处理多种不同类型的资源, 而不用根据上下文环境来识别资源指定的访问方式. 另外, 加入新的协议方案也更容易
 - resource - 资源的定义是"可标识的任何东西", 可以是单一的, 也可以是多数的集合体. 除了文档文件, 图像或服务等能区别于其他类型的, 全都可以作为资源?
 - identifier - 表示可标识的对象
- uri就是由某个协议方案表示的资源的定位标识符, 协议方案指访问资源所使用的协议类型名称
- uri用字符串标识某一互谅网资源, 而url表示资源的地点. 因此url是uri的子集
- 绝对uri的格式:

```text
http://      user:passwd   @    www.example.com   :    80    /dir/index.html    ?uid=1         #ch1
   |              |                    |                |           |              |             |
协议方案名   登录信息(认证)        服务器地址         端口号   带层次的文件路径  查询字符串  片段标识符
```

##Chapter2 简单的http协议

- 按实际情况, 两台计算机作为客户端和服务器端的角色可互换, 但就仅一条通信路线而言, 服务器端和客户端的角色是**确定的**, http协议能明确区分客户端与服务器端
- 请求报文由`请求方法`, `请求uri`, `协议版本`, 可选的`请求首部字段`和`内容实体`构成

```text
方法        uri         协议版本
 |           |              |
post    /form/entry     HTTP/1.1
Host: kissg.me
Connection: keep-alive                               ---请求首部
Content-Type: application/X-www-form-urlencoded
Content-Length: 16

name=kissg&age=22
     |
  内容实体
```

- 响应报文基本上由`协议版本`, `状态码`, `用以解释状态码的原因短语`, 可选的`首部响应字段`和`实体主体`构成

```text
协议版本     状态码   状态码的原因短语
   |            |         |
HTTP/1.1       200        OK
Date: Tue, 10 Jul 2012 06:50:15 GMT           ----响应首部字段
Content-Length: 362
Content-Type: text/html

<html>
...
  |
 主体
```

- http是无状态的协议, 它自身不对请求和响应之间的通信状态进行保存, 这是为了更快速地处理大量事务, 确保协议的可伸缩性, 而特意将http协议设计得简单
- 状态保持的功能由cookie提供
- 指定请求uri的几种方式:
 1. uri为完整的uri: `GET http://hackr.jp/index.htm HTTP/1.1`
 2. 请求首部Host中写明网络域名或ip地址:

```text
GET /index.htm HTTP/1.1
Host: hackr.jp
```

- 如果不是访问特定资源而是对服务器本身发起请求, 可用`*`代替uri, 如下面的例子是查询http服务器支持的http method种类:

```text
OPTIONS * HTTP/1.1
```

- http方法:
 1. get: 获取资源. 请求访问已被uri识别的资源, 指定的资源经服务器端解析后返回响应内容
 2. post: 传输实体主体. get方法也可以传输实体的主体, 但一般不用get, 而用post. post的主要目的并不是获取响应的主体内容
 3. put: 传输文件. 要求在报文的主体中包含文件内容, 然后保存到请求uri指定的位置. HTTP/1.1的put方法自身不带验证机制, 任何人都可以上传文件, 存在安全性问题
 4. head: 获取报文首部. 与get一样, 只是不返回报文主体内容. 用于确认uri的有效性及资源更新的日期时间等
 5. delete: 删除文件. 与put方法相反, 同样不带验证机制
 6. options: 询问支持的方法.
 7. trace: 追踪路径, 让服务器将之前的请求通信环回给客户端. 通过trace可查询发出的请求是怎样被加工或篡改的(从代理服务器路由中转时请求可能被篡改)
 8. connect: 要求在代理服务器通信时建立隧道, 实现用隧道协议(secure sockets layer, ssl | transport layer security, tls)进行tcp通信. 请求报文的请求行要写明端口号
- http method的作用在于, 可以指定请求的资源按期望产生某种行为
- http协议的初始版本, 每进行一次htt通信都要断开tcp连接.
- 持久连接(http keep-alive,或称http connection reuse), 只要任意一端没有明确提出断开连接, 则保持tcp连接状态. 减少了tcp连接重复建立和断开造成的额外开销, 减轻了服务器负载. HTTP/1.1中, 所有连接默认是持久连接
- 管线化(pipelining). 持久化连接使得多数请求以管线化方式发送成为可能. 管线化技术, 不必等待响应亦可直接发送下一个请求, 即同时并行发送多个请求.
- 持久连接让请求更快结束, 管线化技术比持久连接还要快, 请求越多, 时间差越明显
- http是无状态协议, 它不对之前发生过请求与响应的状态进行管理. 设计之初, 这是为了让http更简单, 使得它能适用于更多场景, 同时也减轻了服务器负担.
- cookie技术通过在请求和响应报文中写入cookie信息来控制客户端的状态. Cookie根据从服务器端发送的响应报文内的一个叫做 Set-Cookie的首部字段信息,通知客户端保存 Cookie。当下次客户端再往该服务器发送请求时,客户端会自动在请求报文中加入 Cookie 值后发送出去。服务器端发现客户端发送过来的 Cookie 后,会去检查究竟是从哪一个客户端发来的连接请求,然后对比服务器上的记录,最后得到之前的状态信息

##Chapter3 http报文内的http信息

- http报文大致可分为报文首部与报文主体2快, 两者由最初出现的空行分隔开(\r\n\r\n)
- 通常不一定要有报文主体
- 请求报文首部由`请求行` + `首部字段` + 其他构成
- 响应报文首部由`状态行` + `首部字段` + 其他构成
- `请求行` = `http method` + `uri` + `http edition`
- `状态行` = `http edition` + `result code` + `explain`
- `首部字段`包括请求或响应的各种条件和属性, 一般有`通用首部`, `请求首部`, 响应首部`, 实体首部`
- 其他, 可能包含http的rfc里未定义的首部(cookie等)
- HTTP 报文的主体用于传输请求或响应的实体主体。通常,报文主体等于实体主体。只有当传输中进行编码操作时,实体主体的内容发生变化,才导致它和报文主体产生差异。
- `内容编码`指明应用在实体内容上的编码格式,并保持实体信息原样压缩。内容编码后的实体由客户端接收并负责解码。(gzip, compress, deflate, identity)
- `分块传输编码`: 在传输大容量数据时,通过把数据分割成多块,能够让浏览器逐步显示页面。使用分块传输编码的实体主体会由接收的客户端负责解码,恢复到编码前的实体主体。
- HTTP 协议中也采纳了`多部分对象集合`,发送的一份报文主体内可含有多类型实体. 在 HTTP 报文中使用多部分对象集合时,需要在首部字段里加上Content-type. 使用`boundary`字符串来划分多部分对象集合指明的各类实体
- 执行`范围请求`时,会用到首部字段 Range 来指定资源的 byte 范围: `Range: bytes=5001-10000`. 针对范围请求,响应会返回状态码为 206 Partial Content 的响应报文.
- `内容协商机制`是指客户端和服务器端就响应的资源内容进行交涉,然后提供给客户端最为适合的资源。内容协商会以响应资源的语言、字符集、编码方式等作为判断的基准。包含在请求报文中的某些首部字段就是判断的基准: `Accept`, `Accept-Charset`, `Accept-Encoding`, `Accept-Language`, `Content-Language`. `内容协商`技术分为`服务器驱动`, `客户端驱动`, `透明协商(结合体)`

##Chapter4 返回结果的HTTP状态码

- HTTP 状态码负责表示客户端 HTTP 请求的返回结果、标记服务器端的处理是否正常、通知出现的错误等工作
- 状态码的第一位指定了响应类别, 后两位无分类:
 1. 1XX Informational(信息性状态码) 接收的请求正在处理
 2. 2XX Success(成功状态码) 请求正常处理完毕
  1. 200 ok
  2. 204 no content, 表示服务器接收的请求已成功处理, 但返回的响应报文中不含实体的主体部分, 也不允许返回任何实体的主体
  3. 206 partial content, 表示客户端进行了范围请求, 而服务器成功执行了这部分的 GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容
 3. 3XX Redirection(重定向状态码) 需要进行附加操作以完成请求
  1. 301 moved permanently, 永久性重定向
  2. 302 found, 临时性重定向
  3. 303 see other, 表示由于请求对应的资源存在着另一个 URI,应使用GET方法定向获取请求的资源, 明确表示客户端应当采用 GET 方法获取资源
  4. 304 not modified, 表示客户端发送附带条件的请求 A 时,服务器端允许请求访问资源,但未满足条件的情况, 与重定向无关
  5. 307 temporary redirect, 临时重定向, 与302含义相同
 4. 4XX Client Error(客户端错误状态码) 服务器无法处理请求
  1. 400 bad request, 请求报文中存在语法错误
  2. 401 unauthorized , 表示发送的请求需要有通过http认证的认证信息
  3. 403 forbidden, 请求资源的访问被拒绝
  4. 404 not found, 服务器上未找到请求的资源. 也可以在服务器端拒绝请求且不想说明理由时使用
 5. 5XX Server Error(服务器错误状态码) 服务器处理请求出错
  1. 500 internal server error, 服务器内部错误
  2. 503 service unavailable, 服务器暂时处于超负载或正在进行停机维护,现在无法处理请求

##Chapter5 与http协作的web服务器

- 一台web服务器可以搭建多个独立域名的web网站, 也可以作为通信路径上的中转服务器提升效率
- http/1.1规范允许一台http服务器搭建多个web站点, 这利用了虚拟主机的功能
- 在互联网上, 域名通过dns服务映射到ip地址之后访问目标网站, `当请求发送到服务器时, 已经以ip地址形式访问了`. 因此如果一台服务器托管了多个域名, 当收到请求时, 需要弄清楚究竟要访问哪个域名.
- `代理`是具有转发功能的`应用程序`.
 - 其不改变请求uri, 可级联, 转发时, 需附加`Via`首部字段以标记经过的主机信息
 - 使用代理服务器的理由有:利用缓存技术(稍后讲解)减少网络带宽的流量,组织内部针对特定网站的访问控制,以获取访问日志为主要目的,等等。
 - 代理有多种使用方法,按两种基准分类。一种是是否使用缓存,另一种是是否会修改报文。
- `网关`是转发其他服务器通信数据的`服务器`
 - 网关能使通信线路上的服务器提供非 HTTP 协议服务。
 - 利用网关能提高通信的安全性,因为可以在客户端与网关之间的通信线路上加密以确保连接的安全。
- `隧道`是在相隔甚远的客户端和服务器两者之间进行中转, 并保持双方通信连接的`应用程序`
 - 隧道的目的是确保客户端能与服务器进行安全的通信。
 - 隧道本身不会解析http请求, 隧道本身是透明的
