# 如何保护隐私——编程随想的系列博客

## 如何选择软件和服务

- 提供服务 vs 提供软件
 - 按照收集信息的能力排序：提供软件与服务 > 提供软件 >  提供服务\\
 (软件是安装到操作系统中的，（从技术上讲）不但可以访问文件系统，而且可以获取操作系统中的很多信息。相对而言，纯 Web 的应用就安全得多)
- 非盈利性(非商业) vs 盈利性(商业)
 - 商业公司有盈利压力，所以对收集用户信息具有天然的偏好。相对而言，非营利组织就好很多——它们或许也会收集，但肯定没商业公司这么大的热情。
- 国外 vs 国内
 - 天朝有个金盾工程, 会收集并监控国内网民的各种网络行为(恐怖如斯)
- 开源软件 vs 闭源软件
 - 源代码公开，如果软件带有后门或偷窥隐私的行为，就比较容易被发
 - 相对而言，“闭源软件”由于没有公开源代码，要发现其后门或偷窥隐私的行为，就比较难
- 单机软件 vs 网络软件
- 绿色软件 vs 非绿色软件
 - 所谓的“绿色软件”，就是无需安装，也无需依赖管理员权限的软件。
 - 反之，“非绿色软件”要么需要安装，要么需要管理员才可以运行
 - 要避免使用高权限用户, 技巧之一就是: 尽量用绿色软件
- 上网类型: 有中心 vs 无中心 vs 半中心
 - 相比 C/S 过度依赖中央服务器，“去中心化”的好处在于，你的信息分散在许许多多不同的网络节点中——这就增加了收集隐私的难度。
 - 按照收集信息的能力排序：“有中心”>“半中心”>“无中心”
 - 传统的 VPN 翻墙和代理翻墙是“有中心”的。假设长期使用同一个 VPN 提供商，万一该提供商记录上网历史，隐私就泄露
 - TOR 跟 I2P 是无中心的。而且中转节点会随着时间频繁变化。因此，即使中转节点偷窥你的网络流量，看到的也是残缺不全的片段。
 - TOR 和 I2P 本身都是多重代理。只有最后一个节点（术语叫“出口节点”）可以看到你的访问的网站；其它节点看到的都是强加密的流量。

## 关于浏览器的基本防范

- 虽然 Chrome 是基于开源的 Chromium，但是 Chrome 包含闭源的模块。所以严格来讲，Chrome 只能算部分开源。
- 从**开源**, **非营利**, **商业模式**看, `Firefox`的隐私保护 > `Chrome`, 是首选(所以,为什么`Tor浏览器`是基于`Firefox`)
- "浏览历史"导致隐私问题, 包括网址历史, 下载历史, 页面缓存, cookies
- "隐私浏览模式"并不完全安全. 浏览器插件不受浏览器控制, 在"隐私模式"下, 某些插件还是可能会留下上网痕迹(所以, 为什么Tor浏览器强烈不建议安装插件); "隐私模式"下保存书签仍然有效, 如此看来,这本身就有矛盾啊
- 更彻底地解决浏览历史--使用虚拟机. 由于虚拟机是操纵系统级别的, 即使是浏览器插件也不会留下痕迹. 步骤如下:
 1. 先安装虚拟机软件，然后装一个虚拟操作系统（Guest OS）
 2. 在 Guest OS 中安装好上网相关的软件（比如浏览器、插件、等）
 3. 在没有访问任何网站之前，先做一个 Guest OS 的快照（这是一个干净的快照）
 4. 在这个 Guest OS 里面上网
 5. 上网结束后，回退到这个干净的快照
- 插件 vs 扩展
 - 插件, 即plugin; 扩展, 即extension
 - 插件:
  - 在功能上，插件通常是用来渲染页面里的 <object> 或 <embed> 标签；不会增加浏览器自身的功能。
  - 插件通常实现比较`底层的功能`，一般以操作系统的本地代码（也叫"原生代码"）编写，可以调用操作系统的 API。形式上，插件以动态库的方式，加载到浏览器的进程内。由于使用本地代码编写，插件通常依赖于特定的操作系统（不同系统的插件不能混用）。
 - 扩展:
  - 扩展，是用来扩展浏览器自身的功能。扩展可以调用浏览器自身的 API，但是扩展通常不能调用操作系统的 API。
  - 一般来说，扩展是跟操作系统无关的。比如 Firefox 的大部分扩展，既可以用于 Windows 平台的 Firefox，也可以用于 Linux 和 Mac OS X 的 Firefox。
 - 插件是用本地代码编写的，调用的是操作系统的 API。所以，插件的行为浏览器是无法控制的。相对而言，扩展调用的是浏览器的 API，所以扩展的行为，浏览器是比较可控的
 - 插件也可以在操作系统中留下自己的一些痕迹(姑且称为"插件的 cookie"), 而且它是独立于浏览器 cookie 的, 这就导致如下两个隐私问题:
  1. 当你在浏览器中清空 HTTP Cookies 的时候，插件的 cookie 不会受影响；
  2. 浏览器的"隐私模式"会限制 HTTP Cookies 的永久保存，但是浏览器无法限制插件的 cookie
 - 解决插件留下的痕迹:
  1. 不装任何插件
  2. 利用虚拟机的快照功能
- 浏览器 cookie 的主要功能是：帮助网站保存一些小片段的信息。
- cookie的特点:
 1. 存储信息量小, 但能耐大
 2. 绑定到域名和路径. (绑定的域名可以是**小数点**开头, 以匹配所有下级域名)
- cookie的类型:
 1. 第一方 vs 第三方
 2. 内存型 vs 文件型
- cookie的优点:
 1. 自动登录
 2. 提供个性化界面
- 一般来说, 有正经用途的cookie大都是第一方cookie; 第三方cookie大部分是用来收集广告信息和用户行为
- 利用cookie收集个人隐私的方式举例:
 1. 同一服务提供商的不同服务之间,共享cookie
 2. 利用cookie来追送访问网站的行为(访问频率, 经常性看的页面, 页面停留时间等)
- 隔离浏览器
 1. 多浏览器, 一个方便使用, 一个安全使用
 2. 多实例(`Multiple Profiles`), 每个实例都具有独立的插件, 扩展, 外观, 页面缓存, cookie等, 不同实例之间相互隔离, 互不影响. 但多实例 != 多用户
 3. 多用户, 此处用户指多个操作系统用户. 所有主流的操作系统都会对系统用户的资源进行隔离
 4. 多虚拟机. 隔离性比前3者更彻底.
- DNT(Do Not Track). 要起作用还得考服务器的自觉
- User Agent, 是用来标识客户端信息的(包括 浏览器的类型和版本、操作系统类型和版本、等等). 因此, 服务器可以发送针对性的响应
- 有些浏览器的 User Agent 写得太详细了。这就导致：很多额外的客户端信息也通过 User Agent 提交到 Web 服务端。网站拿到这么详细的信息，就可以知道操作系统和浏览器的很多细节。另外，User Agent 越详细，"独特性"就越明显。
- 如果对隐私要求比较高, 可以伪造一个浏览器User Agent(爬虫都能伪造, 浏览器当然也行咯!):
 1. Firefox: 在浏览器地址栏输入`about:config`, 再新建字符类型的"首选项", 名称设为"general.useragent.override"
 2. Chrome: 在启动参数中加`--user-agent="xxxx"`
- User Agent 集中营: [http://www.useragentstring.com/pages/useragentstring.php](http://www.useragentstring.com/pages/useragentstring.php)

## 关于浏览器"指纹"

- 非直接接触到的, 但能通过技术获取, 并能以此推断对象的特征, 称为"指纹"
- 特征越独特, 则特征的信息量越大. 信息量越大的特征, 能将对象定位到一个越小的范围
- 用**比特数**来衡量指纹携带的信息量
- HTTP 协议是 Web 的基石。只要通过浏览器访问 Web，必定是基于 HTTP 协议的。因此，Web 网站的服务器必定可以获取到跟浏览器相关的某些信息. 浏览器指纹, 这就是了
- 指纹追踪 - 访问网站时, 服务器端会记录下浏览器指纹, 并记录在该网站的行为; 不同于cookie, 无法清楚浏览器指纹, 因为是记录在服务器端的. http协议是无状态的协议, 服务器承担了保存状态的职责, 而cookie只是存放在客户端的一个信物而言.
- 浏览器指纹 vs. cookie
 1. cookie 需要把信息保存在浏览器端，所以会被用户发现，也会被用户清除。
 2. 而“浏览器指纹”无需在客户端保存任何信息，不会被用户发觉，用户也无法清除（换句话说：甚至无法判断访问的网站到底有没有收集浏览器指纹)
- 浏览器指纹包括:
 - User Agent
 - 屏幕分辨率, 包括尺寸, 颜色深度
 - 时区
 - 浏览器的插件信息
 - 浏览器的字体信息
 - Canvas绘图的指纹 - H5的功能, 可以让 JavaScript 脚本在页面的canvas元素中绘图. 不同的浏览器类型，不同的浏览器版本，不同的操作系统平台，都会导致“Canvas 绘图”在一些细节方面的差异
 - HTTP ACCEPT
- [这个网站可以测试浏览器指纹](https://panopticlick.eff.org/)
- `User Agent`是浏览器指纹的关键信息. 解决`User Agent`暴露的方法:
 - 针对唯一性:
  - 多浏览器
  - 多实例 - Chrome提供了`Multiple Profiles`和`Multiple Accounts`, 但多用户仍属于同一个实例. 这里实例的概念与类的实例概念差不多. 配置多个实例, 修改每个实例的User Agent
  - 多虚拟机 - 在不同虚拟机中安装相同浏览器, 也要修改每个虚拟机中的浏览器的User Agent. 另一个优点是, 配置虚拟机时可以设置不同的屏幕分辨率和系统时区
 - 破坏确定性
  - 伪造随机的User Agent - 使用脚本每次选择不同的User Agent来启动浏览器
  - Firefox - 通过修改 %APPDATA%\Mozilla\Firefox\Profiles 默认实例目录下的user.js:`user_pref("general.useragent.override", "xxx");xxx为要修改的User Agent
  - Chrome - 如前所述, 在启动参数中加入`--user-agent="xxx"`
- 虚拟机不适用全屏模式时, 系统的分辨率是一个奇怪的分辨率, 独特性很高, 带有很多的指纹信息量. 因此使用虚拟机时, 始终使用"全屏"

## 其它桌面软件的隐私问题

- 安全软件
 - 安全软件如果要查杀病毒/木马，通常需要先扫描硬盘文件。如果某款安全软件不靠谱，那么它在扫描硬盘的过程中，就会悄悄滴收集硬盘上有价值的个人资料. 并在联网时将信息发送到厂商服务器
 - 同理, 安全软件可能通过**网络流量监控**收集用户的上网行为
- 文字输入类
 - 敏感词监控 - 敏感词汇汇报功能
 - 个性化词库同步
- 即时通信类
 - 敏感词监控 - 聊天时输入了"敏感词库"中的敏感词, 聊天内容可能被记录在服务器上- -
 - 服务器泄漏导致隐私问题
- 下载类
 - 暴露隐私文件 - 正常的 P2P 下载软件，只会上传“用户共享出来的目录里的文件”. 听说迅雷会自作主张共享其他文件
 - 收集下载地址
- 媒体播放类
 - 将媒体信息上传到厂商服务器
 - 自动下载字幕, 也会暴露正在播放的视频信息
- [以上常用桌面软件替代品](https://program-think.blogspot.com/2014/08/privacy-protection-8.html)
- 替代方案:
 1. web版
 2. 配置网络防火墙, 限制联网
 3. 使用绿色版
 4. 使用"沙盒"进行隔离
 5. 使用虚拟机 - 多个虚拟机完全隔离, 敏感数据隔离. 一个Host OS就装了虚拟机软件, 所有操作都在虚拟机中进行, 尼玛嗨!
- 最安全的是：既不用流氓公司的软件，也不用流氓公司的网络服务。
